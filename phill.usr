c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - userbc : boundary conditions
c     - useric : initial conditions
c     - uservp : variable properties
c     - userf  : local acceleration term for fluid
c     - userq  : local source term for scalars
c     - userchk: general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
c>    include subroutines 
      include 'lib/shared_sub.f' ! shared computations
      include 'lib/fluid_sub.f' ! fluid
      include 'lib/filtering_sub.f' ! TLES
      include 'lib/forcing_sub.f' ! low wave number forcing
      include 'lib/slf_sub.f' ! linear forcing
      include 'lib/usr_sub.f' ! usr-file data
      include 'lib/statistics_sub.f' ! flow statistics
c-----------------------------------------------------------------------
c>    set variable properties
      subroutine uservp(ix,iy,iz,eg)
c     interface
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer eg
c     implementation

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
c>    set acceleration term
      subroutine userf(ix,iy,iz,eg)
c     interface
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer ix,iy,iz,eg
c     implementation
      integer  e ! local element number

      e = gllel(eg)
      call usr_userf(istep,ix,iy,iz,e,ux,uy,uz,ffx,ffy,ffz)

      return
      end
c-----------------------------------------------------------------------
c>    set source term
      subroutine userq(ix,iy,iz,eg)
c     interface
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer ix,iy,iz,eg
c     implementation

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
c>    set up boundary conditions
      subroutine userbc(ix,iy,iz,f,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer eg
c     implementation
 
c     ux   = 0.0
c     uy   = 0.0
c     uz   = 0.0
c     temp = 0.0

      return
      end
c-----------------------------------------------------------------------
c>    set up initial conditions
      subroutine useric(ix,iy,iz,eg)
c     interface
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer eg
c     implementation

c     call usr_useric(ifield,pi,x,y,z,ux,uy,uz,temp)

      real amp, ran
      
      amp = 0.0

      ran = 3.e4*(ieg+X*sin(Y)+Z*cos(Y))
     $     + 4.7e2*ix*iy*iz - 1.5e3*ix*iy + .5e5*ix
      ran = 6.e3*sin(ran)
      ran = 3.e3*sin(ran)
      ran = cos(ran)
c     ux = 1. + ran*amp
      ux = 0.
      
      ran = (2+ran)*1.e4*(ieg+Y*sin(Z)+X*cos(Z))
     $     + 1.5e3*ix*iy*iz - 2.5e3*ix*iy + 8.9e4*ix
      ran = 2.e3*sin(ran)
      ran = 7.e3*sin(ran)
      ran = cos(ran)
      uy = ran*amp
      
      ran = (4+ran)*5.1e4*(ieg+Z*sin(X)+Y*cos(X))
     $     + 4.6e3*ix*iy*iz - 2.9e4*ix*iy + 3.7e3*ix
      ran = 9.e3*sin(ran)
      ran = 4.e3*sin(ran)
      ran = cos(ran)
      uz = ran*amp

      return
      end
c-----------------------------------------------------------------------
c>    initialize and compute dispersed phase and
c>    write out data
      subroutine userchk()
c     interface
      include 'SIZE'
      include 'TOTAL'
      include 'RESTART' 
c     implementation

      call usr_chk1(istep,iostep,dt,torder,volvm1,pi,bm1,binvm1,
     + xm1,ym1,zm1,vx,vxlag,vy,vylag,vz,vzlag,pr,param(1),param(2))
      call usr_chk2(istep,iostep,nsteps,ifreguo,ifxyo,time,pr,t,
     + xm1,ym1,zm1,vx,vy,vz)

      return
      end
c-----------------------------------------------------------------------
c>    modify element vertices 
      subroutine usrdat() 
c     interface
      include 'SIZE'
      include 'TOTAL'
c     implementation

      return
      end
c-----------------------------------------------------------------------
c>    modify mesh coordinates
      subroutine usrdat2() 
      implicit none
c     interface
      include 'SIZE'
      include 'TOTAL'
c     implementation

      integer iel
c     mesh stretching
      real Betax, Betay
c     Hill parameters
      real Lx, Ly, Lz, W, H
      common /hill_param/ Lx, Ly, Lz, W, H, Betax, Betay
c     Local variables
      real Ubulk
      
      Betax = 2.0
      Betay = 2.4
      Lx = 9.
      Ly = 3.035
      Lz = 4.5
      W  = 1.929
      H = 1.

c               Lx      
c      <----------------->
c      ___________________ 
c                           ^
c                           |
c                           |
c      _                 _  | Ly
c   ^   \               /   |
c H |    \             /    |
c   v     \___________/     v
c      <-->
c       W
      
c     Transform box mesh to periodic hill (only for the conforming mesh!!)
      call box2phill

c     apply mass flux to drive the flow such that
c     - Ubulk = velocity averaged over the whole domain
c     - Ubar_inlet = velocity averaged over the inlet plane = 1.
      Ubulk = (Ly-H)*Lz

      if (nid.eq.0) write(6,*) 'U_bulk = ', Ubulk, ' Ubar_inlet = 1'
      
      param(54) = 1             ! x-direction
      param(55) = Ubulk         ! Ubulk

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
c     interface
      include 'SIZE'
      include 'TOTAL'
c     implementation

      return
      end
c-----------------------------------------------------------------------
      subroutine box2phill
      implicit none
      include 'SIZE'
      include 'GEOM'            ! {x,y,z}m1
      include 'INPUT'           ! param
      include 'SOLN'

      integer i, ntot
      real Betax, Betay
      real Lx, Ly, Lz, Wh, H    ! x dimension, y dimension, hill half width, hill height
      common /hill_param/ Lx, Ly, Lz, Wh, H, Betax ,Betay
      real shift, amp
      real xscale, yscale, zscale, yh, xx, yy, zz
      real hill_step,hill_height,xfac,glmax,glmin
      real xmin, xmax, ymin, ymax, zmin, zmax
      save xmin, xmax, ymin, ymax, zmin, zmax
      logical ifminmax
      save ifminmax
      data ifminmax /.false./
      
      ntot = nx1*ny1*nz1*nelt

      if (.not.ifminmax) then
         ifminmax = .true.
         xmin = glmin(xm1,ntot)
         xmax = glmax(xm1,ntot)
         ymin = glmin(ym1,ntot)
         ymax = glmax(ym1,ntot)
         if (if3d) then
            zmin = glmin(zm1,ntot)
            zmax = glmax(zm1,ntot)
         endif
      endif
      
C     decrease resolution in the high velocity regions (increase CFL)
      do i=1,ntot
         xm1(i,1,1,1) = 0.5*(sinh(Betax*(xm1(i,1,1,1)-0.5))/
     $    sinh(Betax*0.5) + 1.0)
      enddo

c     increase resolution near the wall
      do i=1,ntot
         ym1(i,1,1,1) = 0.5*(tanh(Betay*(2*ym1(i,1,1,1)-1.0))/
     $    tanh(Betay) + 1.0)
      enddo
      
c     rescale rectangular domain [0,Lx]x[0,Ly]x[0,Lz]
      xscale = Lx/(xmax-xmin)
      yscale = Ly/(ymax-ymin)
      do i=1,ntot
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         xm1(i,1,1,1) = (xx - xmin) * xscale
         ym1(i,1,1,1) = (yy - ymin) * yscale
      enddo
      if (if3d) then
         zscale = Lz/(zmax-zmin)
         do i=1,ntot
            zz = zm1(i,1,1,1)
            zm1(i,1,1,1) = (zz - zmin) * zscale
         enddo
      endif

c     Shift points in x
      amp = 0.25
      do i=1,ntot
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         xm1(i,1,1,1) = xx + amp*shift(xx,yy,Lx,Ly,Wh)
      enddo
      
c     Add hill
      do i=1,ntot
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         yh = hill_height(xx,Lx,Wh,H)
         yscale = 1-yh/Ly
         ym1(i,1,1,1) = yh + yy * yscale
      enddo

      return
      end
c-----------------------------------------------------------------------
C     Step function for the hill
C
C          x=0
C           | 
C      _____|  
C   ^       \
C   |        \     x->
C h |         \
C   v          \_____
C           <-->
C            w     
      function hill_step(x,w,h)
      implicit none

      real x,xs,w,h
      real y,hill_step

      xs = x/w

      if (xs.le.0) then
         y = h
      elseif (xs.gt.0.and.xs.le.9./54.) then
         y = h*min(1.,1.+7.05575248e-1*xs**2-1.1947737203e1*xs**3)
      elseif (xs.gt.9./54.and.xs.le.14./54.) then
         y = h*(0.895484248+1.881283544*xs-10.582126017*xs**2
     $        +10.627665327*xs**3)
      elseif (xs.gt.14./54.and.xs.le.20./54.) then
         y = h*(0.92128609+1.582719366*xs-9.430521329*xs**2
     $        +9.147030728*xs**3)
      elseif (xs.gt.20./54..and.xs.le.30./54.) then
         y = h*(1.445155365-2.660621763*xs+2.026499719*xs**2
     $        -1.164288215*xs**3)
      elseif (xs.gt.30./54..and.xs.le.40./54.) then
         y = h*(0.640164762+1.6863274926*xs-5.798008941*xs**2
     $        +3.530416981*xs**3)
      elseif (xs.gt.40./54..and.xs.le.1.) then
         y = h*(2.013932568-3.877432121*xs+1.713066537*xs**2
     $        +0.150433015*xs**3)
      else
         y = 0.
      endif

      hill_step = y
      
      return
      end
c----------------------------------------------------------------------- 
      function hill_height(x,Lx,w,H)
      implicit none
      real hill_height,hill_step,x,Lx,w,h
      real xx

      if (x.lt.0) then
         xx = Lx + mod(x, Lx)
      elseif (x.gt.Lx) then
         xx = mod(x, Lx)
      else
         xx = x
      endif

      hill_height = hill_step(xx,w,h) + hill_step(Lx-xx,w,h)
      
      return
      end          
c-----------------------------------------------------------------------      
      function shift(x,y,Lx,Ly,W)
      implicit none
      real x,y,Lx,Ly,W
      real xfac,yfac,shift

      yfac = (1-y/Ly)**3

      if (x.le.W/2) then
         xfac = -2./W * x
      elseif (x.gt.W/2.and.x.le.Lx-W/2) then
         xfac = 2./(Lx-W) * x -1-W/(Lx-W)
      elseif (x.gt.Lx-W/2) then
         xfac = -2./W * x + 2*Lx/W
      endif

      shift = xfac*yfac

      return
      end
